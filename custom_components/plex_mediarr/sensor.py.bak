"""The Plex Mediarr sensor."""
from datetime import timedelta
import logging
from plexapi.server import PlexServer
import voluptuous as vol

from homeassistant.components.sensor import PLATFORM_SCHEMA, SensorEntity
from homeassistant.const import (
    CONF_HOST,
    CONF_PORT,
    CONF_TOKEN
)
import homeassistant.helpers.config_validation as cv

_LOGGER = logging.getLogger(__name__)

CONF_MAX_ITEMS = "max_items"

DEFAULT_HOST = 'localhost'
DEFAULT_PORT = 32400
DEFAULT_MAX_ITEMS = 10

SCAN_INTERVAL = timedelta(minutes=5)

PLATFORM_SCHEMA = PLATFORM_SCHEMA.extend({
    vol.Required(CONF_TOKEN): cv.string,
    vol.Optional(CONF_HOST, default=DEFAULT_HOST): cv.string,
    vol.Optional(CONF_PORT, default=DEFAULT_PORT): cv.port,
    vol.Optional(CONF_MAX_ITEMS, default=DEFAULT_MAX_ITEMS): cv.positive_int,
})

async def async_setup_platform(hass, config, async_add_entities, discovery_info=None):
    """Set up the Plex sensor."""
    host = config[CONF_HOST]
    port = config[CONF_PORT]
    token = config[CONF_TOKEN]
    max_items = config[CONF_MAX_ITEMS]

    base_url = f"http://{host}:{port}"

    def _create_server():
        """Create Plex server instance."""
        return PlexServer(base_url, token)

    try:
        server = await hass.async_add_executor_job(_create_server)
    except Exception as error:
        _LOGGER.error("Error connecting to Plex server: %s", error)
        return

    sensor = PlexMediarrSensor(server, max_items)
    async_add_entities([sensor], True)

class PlexMediarrSensor(SensorEntity):
    """Representation of a Plex recently added sensor."""

    def __init__(self, server, max_items):
        """Initialize the sensor."""
        self._server = server
        self._max_items = max_items
        self._name = "Plex Mediarr"
        self._state = None
        self._attributes = {}

    @property
    def name(self):
        """Return the name of the sensor."""
        return self._name

    @property
    def unique_id(self):
        """Return a unique ID for the sensor."""
        return f"plex_mediarr_{self._server.machineIdentifier}"

    @property
    def state(self):
        """Return the state of the sensor."""
        return self._state

    @property
    def extra_state_attributes(self):
        """Return the state attributes."""
        return self._attributes

    def update(self):
        """Update sensor data."""
        try:
            recently_added = []
            
            # Get recently added TV episodes and movies
            for section in self._server.library.sections():
                if section.type in ['show', 'movie']:
                    items = section.recentlyAdded()
                    
                    for item in items:
                        if section.type == 'show':
                            # Handle TV episodes
                            show = item.grandparentTitle
                            fanart = item.artUrl or item.grandparentArt
                            poster = item.thumbUrl or item.parentThumb
                            
                            media_data = {
                                'title': show,
                                'episode': item.title,
                                'number': f"S{item.seasonNumber:02d}E{item.episodeNumber:02d}",
                                'aired': item.originallyAvailableAt.strftime('%Y-%m-%d') if item.originallyAvailableAt else '',
                                'added': item.addedAt.strftime('%Y-%m-%d'),
                                'runtime': int(item.duration / 60000) if item.duration else 0,
                                'type': 'show',
                                'poster': poster,
                                'fanart': fanart,
                                'key': item.key,
                                'ratingKey': item.ratingKey,
                                'summary': item.summary if hasattr(item, 'summary') else ''
                            }
                        else:
                            # Handle movies
                            media_data = {
                                'title': item.title,
                                'year': item.year,
                                'added': item.addedAt.strftime('%Y-%m-%d'),
                                'runtime': int(item.duration / 60000) if item.duration else 0,
                                'type': 'movie',
                                'poster': item.thumbUrl,
                                'fanart': item.artUrl,
                                'key': item.key,
                                'ratingKey': item.ratingKey,
                                'summary': item.summary if hasattr(item, 'summary') else ''
                            }
                        
                        recently_added.append(media_data)

            # Sort by date added, newest first
            recently_added.sort(key=lambda x: x['added'], reverse=True)
            
            # Update state and attributes
            self._state = len(recently_added)
            self._attributes = {
                'data': recently_added[:self._max_items]
            }

        except Exception as err:
            _LOGGER.error("Error updating Plex sensor: %s", err)
            self._state = 0
            self._attributes = {'data': []}